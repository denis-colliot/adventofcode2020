/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.adventofcode.day3

import kotlin.test.*

class ProgramTest {

    private val program by lazy { Program() }

    @Test
    fun `should return that character is a tree`() {
        assertTrue(program.isTree('#'))
        assertFalse(program.isTree('.'))
    }

    @Test
    fun `should convert pattern to map`() {
        // Given
        val pattern = """
            ..##.......
            #...#...#..
            .#....#..#.
            ..#.#...#.#
            .#...##..#.
            ..#.##.....
            .#.#.#....#
            .#........#
            #.##...#...
            #...##....#
            .#..#...#.#
        """.trimIndent()

        //      00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43
        // 00 →  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .
        // 01 →  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .
        // 02 →  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .
        // ...
        // 10 →  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #

        // When
        val result = program.toPatternMap(pattern)

        // Then
        assertEquals(11, result.width)
        assertEquals(11, result.height)

        assertEquals('.', result.get(Program.Coordinates(x = 0, y = 0)))
        assertEquals('#', result.get(Program.Coordinates(x = 2, y = 0)))
        assertEquals('.', result.get(Program.Coordinates(x = 11, y = 0)))
        assertEquals('#', result.get(Program.Coordinates(x = 11, y = 1)))
        assertEquals('.', result.get(Program.Coordinates(x = 19, y = 2)))
        assertEquals('#', result.get(Program.Coordinates(x = 28, y = 2)))
        assertEquals('#', result.get(Program.Coordinates(x = 39, y = 2)))
        assertEquals('.', result.get(Program.Coordinates(x = 42, y = 10)))
        assertEquals('#', result.get(Program.Coordinates(x = 43, y = 10)))
        assertNull(result.get(Program.Coordinates(x = -1, y = -1)))
        assertNull(result.get(Program.Coordinates(x = 43, y = 11)))
        assertNull(result.get(Program.Coordinates(x = 43, y = 12)))
    }

    @Test
    fun `should count 1 tree starting from 0-0 with slope 2-1`() {
        // Given
        val pattern = """
            ..##.......
            #...#...#..
            .#....#..#.
            ..#.#...#.#
            .#...##..#.
            ..#.##.....
            .#.#.#....#
            .#........#
            #.##...#...
            #...##....#
            .#..#...#.#
        """.trimIndent()

        //      00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
        // 00 →  O  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .
        // 01 →  #  .  O  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .
        // 02 →  .  #  .  .  O  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .
        // 03 →  .  .  #  .  #  .  O  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #
        // 04 →  .  #  .  .  .  #  #  .  O  #  .  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .
        // 05 →  .  .  #  .  #  #  .  .  .  .  O  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .
        // 06 →  .  #  .  #  .  #  .  .  .  .  #  .  X  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #
        // 07 →  .  #  .  .  .  .  .  .  .  .  #  .  #  .  O  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #
        // 08 →  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  O  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .
        // 09 →  #  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  O  .  .  #  #  .  .  .  #  #  .  .  .  .  #
        // 10 →  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  O  #  .  #  .  .  #  .  .  .  #  .  #

        // When
        val result = program.countTrees(
                pattern,
                start = Program.Coordinates(x = 0, y = 0),
                slope = Program.Slope(right = 2, down = 1)
        )

        // Then
        assertEquals(1, result)
    }

    @Test
    fun `should count 1 tree starting from 0-0 with slope 2-3`() {
        // Given
        val pattern = """
            ..##.......
            #...#...#..
            .#....#..#.
            ..#.#...#.#
            .#...##..#.
            ..#.##.....
            .#.#.#....#
            .#........#
            #.##...#...
            #...##....#
            .#..#...#.#
        """.trimIndent()

        //      00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
        // 00 →  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .
        // 01 →  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .
        // 02 →  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .
        // 03 →  .  .  X  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #
        // 04 →  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .
        // 05 →  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .
        // 06 →  .  #  .  #  O  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #
        // 07 →  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #
        // 08 →  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .
        // 09 →  #  .  .  .  #  #  O  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #
        // 10 →  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #

        // When
        val result = program.countTrees(
                pattern,
                start = Program.Coordinates(x = 0, y = 0),
                slope = Program.Slope(right = 2, down = 3)
        )

        // Then
        assertEquals(1, result)
    }

    @Test
    fun `should count 1 tree starting from 0-0 with slope 0-1`() {
        // Given
        val pattern = """
            ..##.......
            #...#...#..
            .#....#..#.
            ..#.#...#.#
            .#...##..#.
            ..#.##.....
            .#.#.#....#
            .#........#
            #.##...#...
            #...##....#
            .#..#...#.#
        """.trimIndent()

        //      00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
        // 00 →  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .
        // 01 →  X  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .
        // 02 →  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .
        // 03 →  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #
        // 04 →  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .
        // 05 →  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .
        // 06 →  .  #  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #
        // 07 →  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #
        // 08 →  X  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .
        // 09 →  X  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #
        // 10 →  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #

        // When
        val result = program.countTrees(
                pattern,
                start = Program.Coordinates(x = 0, y = 0),
                slope = Program.Slope(right = 0, down = 1)
        )

        // Then
        assertEquals(3, result)
    }

    @Test
    fun `should count 2 tree starting from 0-0 with slope 3-1`() {
        // Given
        val pattern = """
            ..##.......
            #...#...#..
            .#....#..#.
            ..#.#...#.#
            .#...##..#.
            ..#.##.....
            .#.#.#....#
            .#........#
            #.##...#...
            #...##....#
            .#..#...#.#
        """.trimIndent()

        //      00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
        // 00 →  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .
        // 01 →  #  .  .  O  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .
        // 02 →  .  #  .  .  .  .  X  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .
        // 03 →  .  .  #  .  #  .  .  .  #  O  #  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #
        // 04 →  .  #  .  .  .  #  #  .  .  #  .  .  X  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .
        // 05 →  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  X  #  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .
        // 06 →  .  #  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  O  .  .  #  .  #  .  #  .  #  .  .  .  .  #
        // 07 →  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  X  .  #  .  .  .  .  .  .  .  .  #
        // 08 →  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .  #  .  X  #  .  .  .  #  .  .  .
        // 09 →  #  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  X  .  .  .  .  #
        // 10 →  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  X  .  #

        // When
        val result = program.countTrees(
                pattern,
                start = Program.Coordinates(x = 0, y = 0),
                slope = Program.Slope(right = 3, down = 1)
        )

        // Then
        assertEquals(7, result)
    }

    @Test
    fun `should count 4 trees starting from 2-0 with slope 1-1`() {
        // Given
        val pattern = """
            ..##.......
            #...#...#..
            .#....#..#.
            ..#.#...#.#
            .#...##..#.
            ..#.##.....
            .#.#.#....#
            .#........#
            #.##...#...
            #...##....#
            .#..#...#.#
        """.trimIndent()

        //      00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
        // 00 →  .  .  X  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .
        // 01 →  #  .  .  O  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .
        // 02 →  .  #  .  .  O  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .
        // 03 →  .  .  #  .  #  O  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #
        // 04 →  .  #  .  .  .  #  X  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .
        // 05 →  .  .  #  .  #  #  .  O  .  .  .  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .
        // 06 →  .  #  .  #  .  #  .  .  O  .  #  .  #  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #
        // 07 →  .  #  .  .  .  .  .  .  .  O  #  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #
        // 08 →  #  .  #  #  .  .  .  #  .  .  O  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .
        // 09 →  #  .  .  .  #  #  .  .  .  .  #  X  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #
        // 10 →  .  #  .  .  #  .  .  .  #  .  #  .  X  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #

        // When
        val result = program.countTrees(
                pattern,
                start = Program.Coordinates(x = 2, y = 0),
                slope = Program.Slope(right = 1, down = 1)
        )

        // Then
        assertEquals(4, result)
    }

    @Test
    fun `should return 4 when multiplying all trees count starting from 0-0 with slopes { 2-1, 2-3 }`() {
        // Given
        val pattern = """
            ..##.......
            #...#...#..
            .#....#..#.
            ..#.#...#.#
            .#...##..#.
            ..#.##.....
            .#.#.#....#
            .#........#
            #.##...#...
            #...##....#
            .#..#...#.#
        """.trimIndent()

        //      00 01 02 03 04 05 06 07 08 09 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32
        // 00 →  .  .  X  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .  .  .  #  #  .  .  .  .  .  .  .
        // 01 →  #  .  .  .  #  0  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .  #  .  .  .  #  .  .  .  #  .  .
        // 02 →  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .  .  #  .  .  .  .  #  .  .  #  .
        // 03 →  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #  .  .  #  .  #  .  .  .  #  .  #
        // 04 →  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .  .  #  .  .  .  #  #  .  .  #  .
        // 05 →  .  .  #  .  #  #  .  .  .  .  .  .  .  #  .  #  X  .  .  .  .  .  .  .  #  .  #  #  .  .  .  .  .
        // 06 →  .  #  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #  .  #  .  #  .  #  .  .  .  .  #
        // 07 →  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #  .  #  .  .  .  .  .  .  .  .  #
        // 08 →  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .  #  .  #  #  .  .  .  #  .  .  .
        // 09 →  #  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #  #  .  .  .  #  #  .  .  .  .  #
        // 10 →  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #  .  #  .  .  #  .  .  .  #  .  #

        // When
        val result = program.multiplyTreesCounts(
                pattern,
                start = Program.Coordinates(x = 0, y = 0),
                slopes = listOf(
                        Program.Slope(right = 0, down = 1), // 3
                        Program.Slope(right = 2, down = 1), // 1
                        Program.Slope(right = 3, down = 1)  // 7
                )
        )

        // Then
        assertEquals(21, result)
    }
}
