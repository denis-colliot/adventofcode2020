/*
 * This Kotlin source file was generated by the Gradle 'init' task.
 */
package com.adventofcode.day4

import kotlin.test.Test
import kotlin.test.assertEquals
import kotlin.test.assertFalse
import kotlin.test.assertTrue

class ProgramTest {

    @Test
    fun `should convert raw passports to passports list`() {
        // Given
        val rawPassports = """
            ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
            byr:1937 iyr:2017 cid:147 hgt:183cm
            
            iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
            hcl:#cfa07d byr:1929
            
            hcl:#ae17e1 iyr:2013
            eyr:2024
            ecl:brn pid:760753108 byr:1931
            hgt:179cm
            
            hcl:#cfa07d eyr:2025 pid:166559648
            iyr:2011 ecl:brn hgt:59in
        """.trimIndent()

        // When
        val result = rawPassports.toPassports()

        // Then
        assertEquals(4, result.size)
        assertEquals(mapOf("ecl" to "gry", "pid" to "860033327", "eyr" to "2020", "hcl" to "#fffffd", "byr" to "1937", "iyr" to "2017", "cid" to "147", "hgt" to "183cm"), result[0])
        assertEquals(mapOf("iyr" to "2013", "ecl" to "amb", "cid" to "350", "eyr" to "2023", "pid" to "028048884", "hcl" to "#cfa07d", "byr" to "1929"), result[1])
        assertEquals(mapOf("hcl" to "#ae17e1", "iyr" to "2013", "eyr" to "2024", "ecl" to "brn", "pid" to "760753108", "byr" to "1931", "hgt" to "179cm"), result[2])
        assertEquals(mapOf("hcl" to "#cfa07d", "eyr" to "2025", "pid" to "166559648", "iyr" to "2011", "ecl" to "brn", "hgt" to "59in"), result[3])
    }

    // region Part 1

    @Test
    fun `should return true when checking if passport with all required fields are present`() {
        // Given
        val passport: Passport = mapOf(
                "ecl" to "gry",
                "pid" to "860033327",
                "eyr" to "2020",
                "hcl" to "#fffffd",
                "byr" to "1937",
                "iyr" to "2017",
                "cid" to "147",
                "hgt" to "183cm")

        // When
        val result = passportValidatorBasedOnRequiredFields(passport)

        // Then
        assertTrue(result)
    }

    @Test
    fun `should return false when checking if password without 'cdi' field is valid`() {
        // Given
        val passport: Passport = mapOf(
                "iyr" to "2013",
                "ecl" to "amb",
                "cid" to "350",
                "eyr" to "2023",
                "pid" to "028048884",
                "hcl" to "#cfa07d",
                "byr" to "1929")

        // When
        val result = passportValidatorBasedOnRequiredFields(passport)

        // Then
        assertFalse(result)
    }

    @Test
    fun `should return false when checking if passport without 'cdi' & 'byr' fields is valid`() {
        // Given
        val passport: Passport = mapOf(
                "hcl" to "#cfa07d",
                "eyr" to "2025",
                "pid" to "166559648",
                "iyr" to "2011",
                "ecl" to "brn",
                "hgt" to "59in")

        // When
        val result = passportValidatorBasedOnRequiredFields(passport)

        // Then
        assertFalse(result)
    }

    @Test
    fun `should detect two valid passports within given passports`() {
        // Given
        val rawPassports = """
            ecl:gry pid:860033327 eyr:2020 hcl:#fffffd
            byr:1937 iyr:2017 cid:147 hgt:183cm
            
            iyr:2013 ecl:amb cid:350 eyr:2023 pid:028048884
            hcl:#cfa07d byr:1929
            
            hcl:#ae17e1 iyr:2013
            eyr:2024
            ecl:brn pid:760753108 byr:1931
            hgt:179cm
            
            hcl:#cfa07d eyr:2025 pid:166559648
            iyr:2011 ecl:brn hgt:59in
        """.trimIndent()

        // When
        val result = rawPassports.countValidPassports(passportValidatorBasedOnRequiredFields)

        // Then
        assertEquals(2, result)
    }

    // endregion

    // region Part 2

    @Test
    fun `should detect valid birth year`() {
        assertTrue(birthYearValidator("1920"))
        assertTrue(birthYearValidator("1985"))
        assertTrue(birthYearValidator("2002"))
        assertFalse(birthYearValidator("1919"))
        assertFalse(birthYearValidator("2003"))
    }

    @Test
    fun `should detect valid issue year`() {
        assertTrue(issueYearValidator("2010"))
        assertTrue(issueYearValidator("2015"))
        assertTrue(issueYearValidator("2020"))
        assertFalse(issueYearValidator("2009"))
        assertFalse(issueYearValidator("2021"))
    }

    @Test
    fun `should detect valid expiration year`() {
        assertTrue(expirationYearValidator("2020"))
        assertTrue(expirationYearValidator("2025"))
        assertTrue(expirationYearValidator("2030"))
        assertFalse(expirationYearValidator("2019"))
        assertFalse(expirationYearValidator("2031"))
    }

    @Test
    fun `should detect valid height`() {
        assertTrue(heightValidator("59in"))
        assertTrue(heightValidator("60in"))
        assertTrue(heightValidator("76in"))
        assertTrue(heightValidator("150cm"))
        assertTrue(heightValidator("190cm"))
        assertTrue(heightValidator("193cm"))
        assertFalse(heightValidator("58in"))
        assertFalse(heightValidator("77in"))
        assertFalse(heightValidator("190in"))
        assertFalse(heightValidator("190"))
        assertFalse(heightValidator("149cm"))
        assertFalse(heightValidator("194cm"))
    }

    @Test
    fun `should detect valid hair color`() {
        assertTrue(hairColorValidator("#123abc"))
        assertTrue(hairColorValidator("#059adf"))
        assertTrue(hairColorValidator("#10af89"))
        assertFalse(hairColorValidator("#059adg"))
        assertFalse(hairColorValidator("#123abz"))
        assertFalse(hairColorValidator("123abc"))
    }

    @Test
    fun `should detect valid eye color`() {
        assertTrue(eyeColorValidator("amb"))
        assertTrue(eyeColorValidator("blu"))
        assertTrue(eyeColorValidator("blu"))
        assertTrue(eyeColorValidator("brn"))
        assertTrue(eyeColorValidator("gry"))
        assertTrue(eyeColorValidator("grn"))
        assertTrue(eyeColorValidator("hzl"))
        assertTrue(eyeColorValidator("oth"))
        assertFalse(eyeColorValidator("wat"))
        assertFalse(eyeColorValidator("amc"))
        assertFalse(eyeColorValidator("gru"))
    }

    @Test
    fun `should detect valid passport id`() {
        assertTrue(passportIdValidator("000000001"))
        assertFalse(passportIdValidator("0123456789"))
    }

    @Test
    fun `should detect that all given passports are invalid`() {
        // Given
        val invalidPassports = """
            eyr:1972 cid:100
            hcl:#18171d ecl:amb hgt:170 pid:186cm iyr:2018 byr:1926
            
            iyr:2019
            hcl:#602927 eyr:1967 hgt:170cm
            ecl:grn pid:012533040 byr:1946
            
            hcl:dab227 iyr:2012
            ecl:brn hgt:182cm pid:021572410 eyr:2020 byr:1992 cid:277
            
            hgt:59cm ecl:zzz
            eyr:2038 hcl:74454a iyr:2023
            pid:3556412378 byr:2007
        """.trimIndent()

        // When
        val result = invalidPassports.countValidPassports(passportValidatorBasedOnFieldValidators)

        // Then
        assertEquals(0, result)
    }

    @Test
    fun `should detect that all given passports are valid`() {
        // Given
        val validPassports = """
            pid:087499704 hgt:74in ecl:grn iyr:2012 eyr:2030 byr:1980
            hcl:#623a2f
            
            eyr:2029 ecl:blu cid:129 byr:1989
            iyr:2014 pid:896056539 hcl:#a97842 hgt:165cm
            
            hcl:#888785
            hgt:164cm byr:2001 iyr:2015 cid:88
            pid:545766238 ecl:hzl
            eyr:2022
            
            iyr:2010 hgt:158cm hcl:#b6652a ecl:blu byr:1944 eyr:2021 pid:093154719
        """.trimIndent()

        // When
        val result = validPassports.countValidPassports(passportValidatorBasedOnFieldValidators)

        // Then
        assertEquals(4, result)
    }

    // endregion
}